// 演算子は値（オペランド）を処理して、新しい値を生成する。
// 一般的なのは算術演算子
3 + 2   // => 5: 加算
3 - 2   // => 1: 減算
3 * 2   // => 6: 乗算
3 / 2   // => 1.5: 除算
let points = [  // 2つの要素を持つ配列
    {x: 0, y: 0},   // 各要素はオブジェクト
    {x: 1, y: 1}
];
points[1].x - points[0].x // => 1: オペランドが複雑でも問題ない
"3" + "2"   // => "32": +は数値の場合は加算、文字列の場合は連結

// JavaScriptには算術演算子を短縮表記する方法が定義されている
let count = 0;  // 変数を定義する
count++;    // 変数をインクリメント（数値を1加算）する
count--;    // 変数をデクリメント（数値を1減算）する
count += 2; // 2を加算する count = count + 2; と同じ意味
count *= 3; // 3を乗算する count = count * 3; と同じ意味
count   // => 6: 変数名も式

/*
等値演算子や関係演算子は、それぞれ2つの値が等しいかどうか、等しくないかどうか、
より小さいか、より大きいかなどを調べる。trueまたはfalseに評価される。
*/
let x = 2, y = 3;
x === y // => false: 同値
x !== y // => true: 非同値
x < y   // => true: 小なり
x <= y  // => true: 小なりイコール
x > y   // => false: 大なり
x >= y  // => false: 大なりイコール
"two" === "three"   // => false: 2つの文字列は異なる
"two" > "three" // => true: "tw"は、アルファベット順では、"th"より後だから
false === (x > y);  // => true: falseはfalseと等しい

// 論理演算子は、論理値を組み合わせたり反転させたりする
(x === 2) && (y === 3); // => true: 両方の比較がtrue。&&はANDを意味する
(x > 3) || (y < 3)  // => false: 両方の比較ともtrueではない。||はORを意味する
!(x === y)  // => true: !は論理値を反転させる
